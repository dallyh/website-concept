---
import { Image } from "astro:assets";
import i18n, { loadNamespaces, t } from "../../../i18n/i18n";
import { getLocaleUrl, getLocale } from "astro-i18n-aut";
import Lemmy from "../../../assets/img/projects/lemmy.svg";
import codeBgSm from "../../../assets/img/projects/code_bg_sm.svg";

// i18next
const locale = getLocale(Astro.url);
const namespaces = ["projects"];
await loadNamespaces(locale, namespaces);
---

<div class="projects-cards-wrapper">
    <Image class="code-bg" src={codeBgSm} alt="Code image background" />
    <div class="cards">
        <div class="card">
            <div class="card-content">
                <div class="card-image">
                    <i class="bi bi-globe"></i>
                </div>
                <div class="card-info-wrapper">
                    <div class="card-info">
                        <i class="bi bi-link-45deg"></i>
                        <div class="card-info-title">
                            <a href="https://github.com/dallyh/website" target="_blank">{t("projects:ThisWebsite")}</a>
                            <p>{t("projects:ThisWebsiteDescription")}</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="card">
            <div class="card-content">
                <div class="card-image">
                    <Image class="lemmy-logo" src={Lemmy} width={100} format="avif" alt="Profile picture" />
                </div>
                <div class="card-info-wrapper">
                    <div class="card-info">
                        <i class="bi bi-link-45deg"></i>
                        <div class="card-info-title">
                            <a href="https://github.com/dallyh/lemmy-kt-client" target="_blank">{t("projects:LemmyKtClient")}</a>
                            <p>{t("projects:LemmyKtClientDescription")}{" "}<a href="https://join-lemmy.org/" target="_blank">Lemmy</a></p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="card">
            <div class="card-content">
                <div class="card-image">
                    <i class="bi bi-file-person-fill"></i>
                </div>
                <div class="card-info-wrapper">
                    <div class="card-info">
                        <i class="bi bi-link-45deg"></i>
                        <div class="card-info-title">
                            <a href="https://github.com/dallyh/web-resume" target="_blank">{t("projects:OldWebsite")}</a>
                            <p>{t("projects:OldWebisteDescription")}</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .projects-cards-wrapper {
        width: 100%;
        height: 100%;
        position: relative;
        overflow: hidden;
        background: radial-gradient(transparent 0%, var(--bg-color) 80%);

        .code-bg {
            z-index: -1;
            position: absolute;
            object-position: 0 0;
            object-fit: cover;
            min-width: 1222px;
            left: -15px;
            height: 100%;
            top: -15px;
            opacity: 0.4;
            /* border: 1px solid red; */
        }
    }

    .cards {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(230px, 1fr));
        gap: 1rem;
        width: 100%;
        height: 100%;
        justify-content: center;
        align-items: center;
    }

    .cards:hover > .card::after {
        opacity: 1;
    }

    .card {
        background-color: var(--card-bg);
        border-radius: 10px;
        display: flex;
        height: 230px;
        flex-direction: column;
        position: relative;
        --hover-opacity: 0;
    }

    .card:hover::before {
        opacity: 1;
    }

    .card:hover > .card-content {
        background-color: var(--card-hover-color);
    }

    .card::before,
    .card::after {
        border-radius: inherit;
        content: "";
        height: 100%;
        left: 0px;
        /* opacity: var(--hover-opacity); */
        opacity: 0;
        position: absolute;
        top: 0px;
        transition: opacity 500ms;
        width: 100%;
        pointer-events: none;
    }

    .card::before {
        /* background: radial-gradient(400px circle at var(--mouse-x) var(--mouse-y), rgba(var(--accent), 0.06), transparent 40%); */
        z-index: 3;
    }

    .card::after {
        /* background: radial-gradient(200px circle at var(--mouse-x) var(--mouse-y), rgba(var(--accent), 0.6), transparent 40%); */
        z-index: 1;
    }

    .card > .card-content {
        background-color: var(--card-color);
        backdrop-filter: blur(2px);
        border-radius: inherit;
        display: flex;
        flex-direction: column;
        flex-grow: 1;
        inset: 1px;
        padding: 10px;
        position: absolute;
        z-index: 2;
        transition: all 200ms ease-in-out;
    }

    h1,
    h2,
    h3,
    h4 {
        color: rgb(240, 240, 240);
        font-weight: 400;
    }

    i {
        color: rgb(240, 240, 240);
    }

    .card-image {
        align-items: center;
        display: flex;
        height: 140px;
        justify-content: center;
        overflow: hidden;
    }

    .card-image > i {
        font-size: 4rem;
        opacity: 0.45;
    }

    .card-info-wrapper {
        align-items: center;
        display: flex;
        flex-grow: 1;
        justify-content: flex-start;
        padding: 0px 20px;
    }

    .card-info {
        align-items: flex-start;
        display: flex;
        gap: 10px;
    }

    .card-info > i {
        margin-top: 2px;
        font-size: 1rem;
    }

    .card-info-title > h3,
    .card-info-title > a {
        font-size: 1em;
        line-height: 20px;
    }

    .card-info-title > h4,
    .card-info-title > p {
        color: rgba(255, 255, 255, 0.5);
        font-size: 0.85em;
        margin-top: 8px;
    }

    .lemmy-logo {
        opacity: 0.45;
    }
</style>

<script>
    const setupCards = () => {
        const cards = document.querySelector(".cards") as HTMLDivElement;
        if (cards === null) {
            return;
        }
        const items = cards?.getElementsByClassName("card") as HTMLCollectionOf<HTMLAnchorElement>;

        cards.onmousemove = (e) => {
            for (const navitem of items) {
                const rect = navitem.getBoundingClientRect(),
                    x = e.clientX - rect.left,
                    y = e.clientY - rect.top;

                navitem.style.setProperty("--hover-opacity", "0");
                navitem.style.setProperty("--mouse-x", `${x}px`);
                navitem.style.setProperty("--mouse-y", `${y}px`);
            }
        };

        const initialLoad = () => {
            items[0].style.setProperty("--mouse-x", `left`);
            items[0].style.setProperty("--mouse-y", `top`);
            items[0].style.setProperty("--hover-opacity", "1");
        };

        cards.onmouseleave = (e) => {
            setTimeout(() => {
                initialLoad();
            }, 500);
        };

        initialLoad();
    };

    document.addEventListener(
        "astro:page-load",
        (e) => {
            setupCards();
        },
        { once: false },
    );
</script>
