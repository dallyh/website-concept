---
import Layout from "../../layouts/Layout.astro";
import i18n, { loadNamespaces, t } from "../../i18n/i18n";
import type { ContactForm as ContactFormRes } from "../../i18n/locales";
import { getLocale } from "astro-i18n-aut";
import Footer from "../../components/astro/footer/Footer.astro";
import Banner from "../../components/astro/Banner.astro";
import ContactForm from "../../components/react/ContactForm/ContactForm";

const accentColor = "var(--accent-contact)";

// i18next
const locale = getLocale(Astro.url);
const namespaces = ["contactForm", "shared", "landing"];
await loadNamespaces(locale, namespaces);
const res: ContactFormRes = i18n?.getResourceBundle(locale, "contactForm");
---

<Layout title={`Dalibor Hon - ${t("landing:contact_title")}`}>
    <main>
        <div class="contact-wrapper">
            <Banner accentColor={accentColor} style="contact" />
            <div class="contact-info">
                <div class="contact-me noprint">
                    <h2>{t("shared:LeaveMeAMessage")}</h2>
                    <p>{t("contactForm:ContactMe")}</p>
                    <ContactForm resources={res} client:load />
                </div>
                <div class="social">
                    <h2>{t("shared:SocialLinks")}</h2>
                    <a href="https://www.linkedin.com/in/dalibor-hon/" target="_blank">
                        <i class="devicon-linkedin-plain"></i>
                        {" "}LinkedIn
                    </a>
                </div>
                <div class="location">
                    <h2>{t("shared:Location")}</h2>
                    <p>Ostrava, {t("shared:MSRegion")}</p>
                    <p>{t("shared:CzechRepublic")}</p>
                </div>
            </div>
        </div>
    </main>
    <Footer accentColor={accentColor} showContact={false} />
</Layout>

<style define:vars={{ accentColor }}>
    :root {
        --nav-background: #222831;
        --container-width: 1200px;
        --container-height: min-content;
    }

    body {
        height: 100vh;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
    }

    .contact-wrapper {
        width: var(--container-width);
        height: var(--container-height);
        background-color: var(--nav-background);
        border-radius: 15px;
        border: 1px solid rgba(255, 255, 255, 0.1);
        display: flex;
        flex-direction: column;
        gap: 1em;
    }

    h2 {
        line-height: 1;
        font-size: 1.25rem;
        font-weight: bold;
        background-color: rgba(var(--accentColor), 0.9);
        background-clip: text;
        color: transparent;
        padding-bottom: 1rem;
    }

    .contact-info {
        display: grid;
        grid-template-rows: repeat(3, 0.35fr);
        grid-template-columns: 0.3fr 1fr;
        margin: 0rem 0 0.5rem 0rem;
        gap: 1em;
        padding: 1em;
    }

    .social {
        grid-column: 1 / 2;
        grid-row: 1;
    }

    .location {
        grid-column: 1 / 2;
        grid-row: 2;
    }

    .contact-me {
        grid-row: 1 / 4;
        grid-column: 2;
    }

    .resume-cv > button:hover {
        transform: none;
        text-decoration: underline;
        background: none;
        color: rgba(var(--accentColor), 1);
        cursor: pointer;
    }

    @media (max-width: 1200px) {
        :root {
            --container-width: calc(100vw - 5%);
            --container-height: min-content;
        }

        body {
            height: unset;
            min-height: 100vh;
        }

        main {
            padding: 1rem;
        }

        .contact-info {
            display: grid;
            grid-template-rows: repeat(auto-fit, minmax(min-content, 1fr));
            grid-template-columns: 1fr;
            gap: 1em;
        }

        .social {
            grid-column: auto;
            grid-row: auto;
        }

        .location {
            grid-column: auto;
            grid-row: auto;
        }

        .contact-me {
            grid-row: auto;
            grid-column: auto;
        }
    }

    @media (max-width: 768px) {
        :root {
            --container-height: min-content;
        }
    }

    @media (max-width: 480px) {
        :root {
            --container-width: 100vw;
        }

        main {
            padding: unset;
        }

        .contact-wrapper {
            min-height: 100vh;
            border-radius: unset;
            border: unset;
            background: linear-gradient(to bottom, var(--nav-background) 40%, transparent 100%);
        }
    }
</style>

<script>
    const setupCards = () => {
        const cards = document.querySelector(".cards") as HTMLDivElement;
        if (cards === null) {
            return;
        }
        const items = cards?.getElementsByClassName("card") as HTMLCollectionOf<HTMLAnchorElement>;

        cards.onmousemove = (e) => {
            for (const navitem of items) {
                const rect = navitem.getBoundingClientRect(),
                    x = e.clientX - rect.left,
                    y = e.clientY - rect.top;

                navitem.style.setProperty("--hover-opacity", "0");
                navitem.style.setProperty("--mouse-x", `${x}px`);
                navitem.style.setProperty("--mouse-y", `${y}px`);
            }
        };
    };

    document.addEventListener(
        "astro:page-load",
        (e) => {
            e.target?.removeEventListener;
            setupCards();
        },
        { once: false },
    );
</script>
